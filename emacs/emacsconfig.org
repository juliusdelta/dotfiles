#+TITLE: Emacs Configuration
#+STARTUP: Overview

* General Setup/Tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(global-linum-mode t)
(toggle-scroll-bar -1)
(setq scroll-step 1)
(fset 'yes-or-no-p 'y-or-n-p)
(setq mouse-wheel-progressive-speed nil)
(setq scroll-margin 3)
(setq scroll-conservatively 100000)
(setq scroll-preserve-screen-position 'always)
(setq default-frame-alist '((width . 130) (height . 45)))
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC
** Disable Autosave - I find these files quite annoying and I habitually save the file
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
(setq make-backup-files nil)
#+END_SRC

* Setup Use Package
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
       '("melpa" . "https://melpa.org/packages/"))

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC
* Random Packages
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)

(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC
* Appearance
#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
#+END_SRC
** [[https://github.com/arcticicestudio/nord][Nord]], [[https://github.com/TheBB/spaceline][Spaceline]], [[https://github.com/rakanalh/emacs-dashboard][Emacs-Dashboard]]
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
(load-theme 'nord t)

(use-package spaceline
  :ensure t)

(use-package spaceline-all-the-icons
  :ensure t)

(spaceline-highlight-face-evil-state)
(spaceline-all-the-icons-theme)
(spaceline-all-the-icons--setup-neotree)
(setq spaceline-all-the-icons-separator-type 'arrow)

(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))

(setq dashboard-items '((recents  . 5)
      (projects . 5)
      (agenda . 5)))
(setq dashboard-banner-logo-title "Hey Babe")
(setq dashboard-startup-banner "~/dotfiles/sun.png")
#+END_SRC
* Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t)

(use-package evil-leader
  :ensure t)

(evil-mode t)
(global-evil-leader-mode)

(evil-leader/set-leader "SPC")
(setq evil-leader/in-all-states t)
#+END_SRC
** Evil Window keybindings
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
  "wh" 'evil-window-left
  "wj" 'evil-window-down
  "wk" 'evil-window-up
  "wl" 'evil-window-right
  "wd" 'evil-window-delete
  "w/" 'evil-window-split
  "w|" 'evil-window-vsplit
  "d"  'dired-jump)
#+END_SRC
* Navigation and Projects
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t)
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "c") 'neotree-create-node)
  (evil-define-key 'normal neotree-mode-map (kbd "r") 'neotree-rename-node)
  (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
  (evil-define-key 'normal neotree-mode-map (kbd "gr") 'neotree-refresh)
  (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-quick-look)

  (use-package projectile
    :ensure t)

  (use-package helm
    :ensure t)

  (use-package helm-projectile
    :ensure t)

  (setq helm-display-header-line nil)
  (set-face-attribute 'helm-source-header nil :height 0.1)
  (helm-autoresize-mode 1)
  (setq helm-autoresize-max-height 25)
  (setq helm-autoresize-min-height 25)
  (setq helm-split-window-in-side-p t)

  (use-package expand-region
    :ensure t)
  (setq expand-region-contract-fast-key "z")
 #+END_SRC
** Project Navigation Keybindings
 #+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "ft" 'neotree-toggle
    "pt" 'neotree-projectile-action
    "bb"  'helm-buffers-list
    "bd" 'kill-buffer-and-window
    "bn" 'next-buffer
    "bN" 'previous-buffer
    "ff" 'helm-find-files
    "pf" 'helm-projectile-find-file
    "gs" 'magit-status
    "sgp" 'helm-grep-do-git-grep
    "sp" 'projectile-switch-project
    "'" 'multi-term-dedicated-toggle
    "ct" 'xref-find-definitions
    "nt" 'xref-find-definitions-other-window
    "v" 'er/expand-region
    "fed" (lambda () (interactive) (find-file "~/dotfiles/emacs/emacsconfig.org"))
    "ot" (lambda () (interactive) (find-file "~/Dropbox/orgfiles/todo.org"))
    "on" (lambda () (interactive) (find-file "~/Dropbox/orgfiles/notes.org")))

  (setq tags-table-list '("~/code/modernmsg/modernmsg/TAGS"))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)

  (use-package evil-magit
    :ensure t)
#+END_SRC
* Org Mode
#+BEGIN_SRC emacs-lisp
(use-package org-evil
  :ensure t)

(use-package org-bullets
  :ensure t)
  
(use-package htmlize
  :ensure t)

(use-package ox-reveal
  :ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)
  
(use-package ox-twbs
  :ensure t)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-default-notes-file (concat org-directory "/notes.org"))
 '(org-directory "~/Dropbox/orgfiles")
 '(org-export-html-postamble nil)
 '(org-hide-leading-stars t)
 '(org-startup-folded (quote overview))
 '(org-startup-indented t)
 '(package-selected-packages
   (quote
    (web-mode cargo evil-smartparens zerodark-theme which-key toml-mode toml spaceline-all-the-icons smartparens rust-mode ruby-additional rjsx-mode powerline-evil org-evil org-bullets org-beautify-theme nord-theme neotree multi-term markdown-mode helm-projectile evil-magit evil-leader evil-commentary company coffee-mode))))

(setq org-agenda-files (list "~/Dropbox/orgfiles/todo.org"))

(setq org-capture-templates
      '(("t" "To Do Item" entry (file+headline "~/Dropbox/orgfiles/todo.org" "ToDo")
         "* TODO %?\n%u" :prepend t)
        ("n" "Note" entry (file+headline "~/Dropbox/orgfiles/notes.org" "Note space")
         "* %?\n%u" :prepend t)
        ("b" "Blog Idea" entry (file+headline "~/Dropbox/orgfiles/blogs.org" "Idea List")
         "* %?\n%u" :prepend t)
        ("s" "Code Snippet" entry (file  "~/Dropbox/orgfiles/snippets.org")
         "* %?\t%^g\n#+BEGIN_SRC %^{language}\n\n#+END_SRC" :prepend t)
        ))

(setq org-bullets-bullet-list
      '("◉" "◎" "⚫ " "○" "►" "◇"))
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(setq org-todo-keywords '((sequence "☛ TODO(t)" "|" "✔ DONE(d)")
        (sequence "⚑ WAITING(w)" "|")
        (sequence "|" "✘ CANCELED(c)")))

(evil-leader/set-key
  "oa" 'org-agenda
  "oc" 'org-capture)
#+END_SRC
* Dev Language Settings
#+BEGIN_SRC emacs-lisp
(evil-commentary-mode)

(use-package company
  :ensure t)

(add-hook 'after-init-hook 'global-company-mode)
(setq company-idle-delay 0.1)
(setq company-selection-wrap-around t)
(setq company-minimum-prefix-length 2)
(with-eval-after-load 'company
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous))


(use-package flycheck
  :ensure t)

(use-package smartparens
  :ensure t
  :config
  (progn 
    (show-smartparens-global-mode t)))
(add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
(add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)

(use-package evil-smartparens
  :ensure t)
(add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)
(add-hook 'ruby-mode-hook #'evil-smartparens-mode)
(add-hook 'rust-mode-hook #'evil-smartparens-mode)
(add-hook 'js-mode-hook #'evil-smartparens-mode)

(use-package web-mode
  :ensure t)

(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))

(add-hook 'ruby-mode-hook #'smartparens-mode)
(add-hook 'rust-mode-hook #'smartparens-mode)
(add-hook 'rails-mode-hook #'smartparens-mode)
(add-hook 'js-mode-hook #'smartparens-mode)

(setq sp-highlight-pair-overlay nil)
(setq sp-highlight-wrap-overlay nil)
(setq sp-highlight-wrap-tag-overlay nil)

(use-package toml-mode
  :ensure t)

(use-package cargo
  :ensure t)

(use-package rjsx-mode
  :ensure t)

(use-package jsx-mode
  :ensure t)

(defadvice js-jsx-indent-line (after js-jsx-indent-line-after-hack activate)
  "Workaround sgml-mode and follow airbnb component style."
  (save-excursion
    (beginning-of-line)
    (if (looking-at-p "^ +\/?> *$")
        (delete-char sgml-basic-offset))))
#+END_SRC
* Eshell
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t)

(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

  (defmacro with-face (str &rest properties)
    `(propertize ,str 'face (list ,@properties)))

;;Eshell look
;; (defun shk-eshell-prompt ()
;;   (let ((header-bg "#81A1C1"))
;;     (concat
;;      (with-face (concat (eshell/pwd) " ") :background header-bg)
;;      (with-face (format-time-string "(%Y-%m-%d %H:%M) " (current-time)) :background header-bg :foreground "#888")
;;      (with-face user-login-name :background header-bg :foreground "#000")
;;      (if (= (user-uid) 0)
;;          (with-face " #" :foreground "red")
;;        " $")
;;      " ")))
;; (setq eshell-prompt-function 'shk-eshell-prompt)
;; (setq eshell-highlight-prompt nil)

;; set default tabbing to 2 spaces
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
#+END_SRC
* Elfeed
#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :ensure t)
  
(setq elfeed-feeds
      '("https://rubyweekly.com/rss/"
        "http://planet.emacsen.org/atom.xml"
        "http://sachachua.com/blog/feed/"
        "https://jamesclear.com/feed" 
        "https://this-week-in-rust.org/rss.xml"
        "http://endlessparentheses.com/atom.xml"))

#+END_SRC
* Emacs Custom Set Faces
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(spaceline-all-the-icons-sunrise-face ((t (:inherit powerline-active2 :foreground "#88c0d0"))))
 '(spaceline-all-the-icons-sunset-face ((t (:inherit powerline-active2 :foreground "dark cyan"))))
 '(spaceline-highlight-face ((t (:foreground "#ECEFF4" :background "#5E81AC")))))
#+END_SRC
